import java.math.BigInteger;

class Solution {
    public String solution(String a, String b) {
        BigInteger num1 = new BigInteger(a);
        BigInteger num2 = new BigInteger(b);
        return num1.add(num2).toString();
    }
}

/*
 * 스택을 사용한 두 문자열 숫자 덧셈 알고리즘 (다른 사람 코드 분석)
 * 
 * 전체적인 접근 방식:
 * 이 코드는 스택(Stack)을 사용하여 두 문자열 숫자를 뒤에서부터 더하는 방식으로 구현되어 있습니다.
 * 큰 수의 덧셈에서 자릿수 올림(carry)을 처리하는 전형적인 알고리즘입니다.
 * 
 * 단계별 분석:
 * 
 * 1. 초기 설정 및 길이 맞추기
 *    - 결과를 저장할 answer 변수
 *    - 계산 과정에서 사용할 stack
 *    - 두 문자열의 길이를 비교하여 짧은 것과 긴 것을 구분
 * 
 * 2. 문자열 길이 맞추기 (0 패딩)
 *    - 두 문자열의 길이가 다르면 짧은 쪽 앞에 0을 추가
 *    - 예시: a = "123", b = "4567" → a = "0123", b = "4567"
 * 
 * 3. 뒤에서부터 덧셈 수행
 *    - carry: 자릿수 올림 여부를 나타내는 플래그
 *    - i를 뒤에서부터 시작하여 한 자리씩 처리
 * 
 * 4. 자릿수 올림 처리
 *    - 이전 자리에서 올림이 있으면 +1
 *    - 합이 10 이상이면 다음 자리로 올림하고 현재 자리에는 10을 뺀 값 저장
 *    - 10 미만이면 그대로 저장
 * 
 * 5. 마지막 올림 처리
 *    - 모든 자리를 처리한 후에도 올림이 남아있으면 1 추가
 * 
 * 6. 결과 구성
 *    - 스택에서 꺼내면서 문자열로 변환
 * 
 * 실행 예시 (a = "123", b = "4567"):
 * 1. 길이 맞추기: a = "0123", b = "4567"
 * 2. 뒤에서부터 계산:
 *    - i=3: 3 + 7 = 10 → carry=true, stack=[0]
 *    - i=2: 2 + 6 + 1 = 9 → carry=false, stack=[0,9]
 *    - i=1: 1 + 5 = 6 → carry=false, stack=[0,9,6]
 *    - i=0: 0 + 4 = 4 → carry=false, stack=[0,9,6,4]
 * 3. 결과: stack에서 꺼내면 "4690"
 * 
 * 핵심 아이디어:
 * - 스택 사용: 계산 결과를 역순으로 저장하여 나중에 올바른 순서로 꺼낼 수 있음
 * - 자릿수 올림: 10 이상일 때 다음 자리로 1을 올리는 전통적인 덧셈 방식
 * - 길이 맞추기: 두 문자열의 길이가 다를 때 짧은 쪽에 0을 패딩하여 처리
 * 
 * 이 방식은 매우 큰 수(문자열로 표현된 수)의 덧셈을 정확하게 처리할 수 있는 안전한 방법입니다.
 */