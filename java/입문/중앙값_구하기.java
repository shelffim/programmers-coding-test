import java.util.Arrays;

class Solution {
    public int solution(int[] array) {
        Arrays.sort(array);
        int answer = array[array.length / 2];
        return answer;
    }

}
    /*
 ===================================================================================
            Swift와 Java의 배열 매개변수 처리 방식 차이점에 대한 상세 설명
 ===================================================================================

 이 코드는 스위프트와 자바에서 동일한 로직(배열의 중앙값 찾기)을 구현했지만,
 코드 작성 방식에 차이가 있는 이유를 설명합니다.
 
 핵심은 "스위프트는 데이터 안정성을 위해 매개변수를 '상수'로 취급"하고,
 "자바는 효율성을 위해 객체(배열)의 '참조(주소)'를 전달"하기 때문입니다.

 
 -----------------------------------------------------------------------------------
 
 ## 📝 스위프트(Swift): 매개변수는 기본적으로 '상수(let)'입니다.
 
 1.  **기본 원칙: 안전성(Safety)**
     - 스위프트에서 함수에 배열을 매개변수로 전달하면, 그 배열은 함수 안에서 **상수(`let`)**로 취급됩니다.
     - 이는 함수가 전달받은 원본 데이터를 예기치 않게 변경하는 "부수 효과(Side Effect)"를 방지하여
       코드의 안정성과 예측 가능성을 높이기 위한 스위프트의 중요한 설계 철학입니다.

 2.  **코드 구현**
     - 따라서 매개변수 `array`를 직접 정렬(`array.sort()`)하려고 하면 컴파일 에러가 발생합니다.
     - 정렬을 하려면, 먼저 **변경 가능한 새로운 변수(`var`)**에 `array`를 복사한 뒤,
       그 복사본을 정렬해야 합니다.
       
       ```swift
       // 'array'를 복사하여 변경 가능한 'sort_array'를 생성
       var sort_array = array 
       
       // 복사된 'sort_array'를 정렬 (원본 array는 그대로 유지됨)
       sort_array.sort()
       ```
 
 3.  **더 나은 방법: `sorted()`**
     - 스위프트에는 원본을 변경하지 않고 **정렬된 새로운 배열을 반환**하는 `sorted()` 메서드가 있습니다.
     - 이 메서드를 사용하면 코드를 더 간결하고 안전하게 작성할 수 있습니다.
       
       ```swift
       return array.sorted()[array.count / 2]
       ```

 -----------------------------------------------------------------------------------
 
 ## 🔗 자바(Java): 배열은 '참조(Reference)'가 전달됩니다.
 
 1.  **기본 원칙: 효율성(Efficiency)**
     - 자바에서 배열은 **객체(Object)**이며, 참조 타입(Reference Type)입니다.
     - 메서드에 배열을 매개변수로 전달하면, 배열의 데이터 전체가 복사되는 것이 아니라
       그 배열이 저장된 **메모리 주소의 복사본(참조 값)**이 전달됩니다.
 
 2.  **코드 구현**
     - 결과적으로, 메서드 안의 `array` 변수와 메서드 밖의 원본 배열 변수는 **같은 메모리 주소를 가리키게 됩니다.**
     - 따라서 `Arrays.sort(array)`를 호출하면, 전달된 주소로 찾아가서 그곳에 있는 **원본 배열 자체를 직접 정렬**합니다.
     - 이 때문에 스위프트처럼 별도의 복사본을 만들 필요가 없습니다.

 -----------------------------------------------------------------------------------

 ## ↔️ 핵심 차이 요약

 | 특징             | 스위프트 (Swift)                              | 자바 (Java)                                   |
 | :--------------- | :-------------------------------------------- | :-------------------------------------------- |
 | **매개변수 기본 동작** | **상수(`let`)**로 취급 (변경 불가)                  | **참조 값** 전달 (원본 변경 가능)                 |
 | **데이터 처리 방식** | **값 타입(Value Type)**처럼 동작하여 복사         | **참조 타입(Reference Type)**으로 동작하여 원본 접근 |
 | **주요 철학** | **안정성 (Safety)** - 부수 효과 최소화        | **효율성 (Efficiency)** - 메모리 복사 최소화    |

*/